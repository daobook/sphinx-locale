# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2021, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 4.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-20 19:07+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../extdev/index.rst:4
msgid "Developing extensions for Sphinx"
msgstr "为 Sphinx 开发插件"

#: ../../extdev/index.rst:6
msgid ""
"Since many projects will need special features in their documentation, "
"Sphinx is designed to be extensible on several levels."
msgstr ""
"由于许多项目在文件中需要特殊的功能，Sphinx 被设计成可在多个层面上进行扩展。"

#: ../../extdev/index.rst:9
msgid "Here are a few things you can do in an extension:"
msgstr "这里有几件你可以在插件中做的事情："

#: ../../extdev/index.rst:11
msgid ""
"Add new :term:`builder`\\s to support new output formats or actions on "
"the parsed documents."
msgstr ""
"增加新的 :term:`构建器`，以支持新的输出格式或对解析后的文件的操作。"

#: ../../extdev/index.rst:13
msgid ""
"Register custom reStructuredText roles and directives, extending the "
"markup using the :doc:`markupapi`."
msgstr ""
"使用 :doc:`markupapi` 扩展标记，注册自定义的 reStructuredText 角色和指令。"

#: ../../extdev/index.rst:15
msgid ""
"Add custom code to so-called \"hook points\" at strategic places "
"throughout the build process, allowing you to register a hook and run "
"specialized code. For example, see the :ref:`events`."
msgstr ""
"在整个构建过程中的战略位置添加自定义代码到所谓的 “钩子点”，"
"允许你注册一个钩子并运行专门的代码。例如，请参阅 :ref:`events`。"

#: ../../extdev/index.rst:19
msgid ""
"An extension is simply a Python module with a ``setup()`` function. A "
"user activates the extension by placing the extension's module name (or a"
" sub-module) in their :confval:`extensions` configuration value."
msgstr ""
"一个插件只是一个带有 ``setup()`` 函数的 Python 模块。"
"用户通过将插件的模块名称（或一个子模块）放在"
"他们的 :confval:`extensions` 配置值中来激活插件。"

#: ../../extdev/index.rst:23
msgid ""
"When :program:`sphinx-build` is executed, Sphinx will attempt to import "
"each module that is listed, and execute ``yourmodule.setup(app)``. This "
"function is used to prepare the extension (e.g., by executing Python "
"code), linking resources that Sphinx uses in the build process (like CSS "
"or HTML files), and notifying Sphinx of everything the extension offers "
"(such as directive or role definitions). The ``app`` argument is an "
"instance of :class:`.Sphinx` and gives you control over most aspects of "
"the Sphinx build."
msgstr ""
"当 :program:`sphinx-build` 被执行时，Sphinx 会尝试导入每个被列出的模块，"
"并执行 `yourmodule.setup(app)`。这个函数用来准备插件（比如执行 Python 代码），"
"链接 Sphinx 在构建过程中使用的资源（比如 CSS 或 HTML 文件），"
"并通知 Sphinx 插件提供的一切（比如指令或角色定义）。"
"``app`` 参数是 :class:`.Sphinx` 的一个实例，让你控制 Sphinx 构建的大部分方面。"

#: ../../extdev/index.rst:33
msgid ""
"The configuration file itself can be treated as an extension if it "
"contains a ``setup()`` function.  All other extensions to load must be "
"listed in the :confval:`extensions` configuration value."
msgstr ""
"如果配置文件本身包含 ``setup()`` 函数，就可以被视为一个插件。"
"所有其他要加载的插件必须在 :confval:`extensions` 配置值中列出。"

#: ../../extdev/index.rst:37
msgid ""
"The rest of this page describes some high-level aspects of developing "
"extensions and various parts of Sphinx's behavior that you can control. "
"For some examples of how extensions can be built and used to control "
"different parts of Sphinx, see the :ref:`extension-tutorials-index`."
msgstr ""
"本页面的其余部分描述了开发插件的一些高层次方面，以及你能控制的 Sphinx 行为的各个部分。"
"关于如何建立和使用插件来控制 Sphinx 的不同部分的一些例子，"
"请看 :ref:`extension-tutorials-index`。"

#: ../../extdev/index.rst:45
msgid "Important objects"
msgstr "重要对象"

#: ../../extdev/index.rst:47
msgid ""
"There are several key objects whose API you will use while writing an "
"extension. These are:"
msgstr ""
"在编写插件时，有几个关键对象的 API 你会用到。这些对象是："

#: ../../extdev/index.rst:56
msgid "**Application**"
msgstr ""

#: ../../extdev/index.rst:51
msgid ""
"The application object (usually called ``app``) is an instance of "
":class:`.Sphinx`.  It controls most high-level functionality, such as the"
" setup of extensions, event dispatching and producing output (logging)."
msgstr ""
"应用程序对象（通常称为 ``app``）是 :class:`.Sphinx` 的一个实例。"
"它控制大多数高级功能，如插件的设置、事件调度和产生输出（日志）。"

#: ../../extdev/index.rst:55
msgid ""
"If you have the environment object, the application is available as "
"``env.app``."
msgstr ""
"如果你有环境对象，应用程序就可以作为 ``env.app`` 使用。"

#: ../../extdev/index.rst:69
msgid "**Environment**"
msgstr ""

#: ../../extdev/index.rst:59
msgid ""
"The build environment object (usually called ``env``) is an instance of "
":class:`.BuildEnvironment`.  It is responsible for parsing the source "
"documents, stores all metadata about the document collection and is "
"serialized to disk after each build."
msgstr ""
"构建环境对象（通常称为 ``env``）是 :class:`.BuildEnvironment` 的一个实例。"
"它负责解析源文件，存储所有关于文件集的元数据，并在每次构建后被序列化到磁盘。"

#: ../../extdev/index.rst:64
msgid ""
"Its API provides methods to do with access to metadata, resolving "
"references, etc.  It can also be used by extensions to cache information "
"that should persist for incremental rebuilds."
msgstr ""
"它的 API 提供了访问元数据的方法，解决了引用等问题。"
"它也可以被扩展用于缓存信息，这些信息应该在增量重建中持续存在。"

#: ../../extdev/index.rst:68
msgid ""
"If you have the application or builder object, the environment is "
"available as ``app.env`` or ``builder.env``."
msgstr ""
"如果你有应用程序或构建器对象，环境可作为 ``app.env`` 或 ``builder.env``。"

#: ../../extdev/index.rst:78
msgid "**Builder**"
msgstr ""

#: ../../extdev/index.rst:72
msgid ""
"The builder object (usually called ``builder``) is an instance of a "
"specific subclass of :class:`.Builder`.  Each builder class knows how to "
"convert the parsed documents into an output format, or otherwise process "
"them (e.g. check external links)."
msgstr ""
"构建器对象（通常称为 ``builder``）是 :class:`.Builder` 的特定子类的一个实例。"
"每个构建器类都知道如何将解析后的文件转换为输出格式，或以其他方式处理它们（例如，检查外部链接）。"

#: ../../extdev/index.rst:77
msgid ""
"If you have the application object, the builder is available as "
"``app.builder``."
msgstr ""
"如果你有应用程序对象，构建器可以作为 ``app.builder`` 使用。"

#: ../../extdev/index.rst:85
msgid "**Config**"
msgstr ""

#: ../../extdev/index.rst:81
msgid ""
"The config object (usually called ``config``) provides the values of "
"configuration values set in :file:`conf.py` as attributes.  It is an "
"instance of :class:`.Config`."
msgstr ""
"config 对象（通常称为 ``config``）提供了 :file:`conf.py` 中设置的配置值作为属性。"
"它是 :class:`.Config` 的一个实例。"

#: ../../extdev/index.rst:85
msgid "The config is available as ``app.config`` or ``env.config``."
msgstr "该配置可作为 ``app.config`` 或 ``env.config``。"

#: ../../extdev/index.rst:87
msgid ""
"To see an example of use of these objects, refer to "
":doc:`../development/tutorials/index`."
msgstr ""
"要看这些对象的使用实例，请参考 "
":doc:`../development/tutorials/index`。"

#: ../../extdev/index.rst:93
msgid "Build Phases"
msgstr "构建阶段"

#: ../../extdev/index.rst:95
msgid ""
"One thing that is vital in order to understand extension mechanisms is "
"the way in which a Sphinx project is built: this works in several phases."
msgstr ""
"为了理解插件机制，至关重要的一点是 Sphinx 项目的构建方式：这分几个阶段进行。"

#: ../../extdev/index.rst:98
msgid "**Phase 0: Initialization**"
msgstr "**阶段 0：初始化**"

#: ../../extdev/index.rst:100
msgid ""
"In this phase, almost nothing of interest to us happens.  The source "
"directory is searched for source files, and extensions are initialized. "
"Should a stored build environment exist, it is loaded, otherwise a new "
"one is created."
msgstr ""
"在这个阶段，几乎没有发生我们感兴趣的事情。"
"源目录被搜索为源文件，插件被初始化。"
"如果存在一个存储的构建环境，它将被加载，否则将创建一个新的环境。"

#: ../../extdev/index.rst:105
msgid "**Phase 1: Reading**"
msgstr "**阶段 1：阅读**"

#: ../../extdev/index.rst:107
msgid ""
"In Phase 1, all source files (and on subsequent builds, those that are "
"new or changed) are read and parsed.  This is the phase where directives "
"and roles are encountered by docutils, and the corresponding code is "
"executed.  The output of this phase is a *doctree* for each source file; "
"that is a tree of docutils nodes.  For document elements that aren't "
"fully known until all existing files are read, temporary nodes are "
"created."
msgstr ""
"在第一阶段，所有的源文件（以及在随后的构建中，那些新的或改变的文件）都被读取和解析。"
"这是 docutils 遇到指令和角色的阶段，相应的代码被执行。"
"这个阶段的输出是每个源文件的 *doctree*；也就是 docutils 节点的树。"
"对于那些在读取所有现有文件之前并不完全知道的文件元素，会创建临时节点。"

#: ../../extdev/index.rst:114
msgid ""
"There are nodes provided by docutils, which are documented `in the "
"docutils documentation "
"<https://docutils.sourceforge.io/docs/ref/doctree.html>`__. Additional "
"nodes are provided by Sphinx and :ref:`documented here <nodes>`."
msgstr ""
"有一些节点是由 docutils 提供的，"
"这些节点在 `docutils 文档 <https://docutils.sourceforge.io/docs/ref/doctree.html>`__ 中都有记载。"
"额外的节点由 Sphinx 提供， :ref:`这里有记录 <nodes>`。"

#: ../../extdev/index.rst:118
msgid ""
"During reading, the build environment is updated with all meta- and cross"
" reference data of the read documents, such as labels, the names of "
"headings, described Python objects and index entries.  This will later be"
" used to replace the temporary nodes."
msgstr ""
"在阅读过程中，构建环境会更新所有已读文件的元数据和交叉参考数据，"
"如标签、标题的名称、描述的 Python 对象和索引条目。这以后将被用来替换临时节点。"

#: ../../extdev/index.rst:123
msgid ""
"The parsed doctrees are stored on the disk, because it is not possible to"
" hold all of them in memory."
msgstr ""
"解析后的 doctree 存储在磁盘上，因为不可能在内存中容纳所有的 doctree。"

#: ../../extdev/index.rst:126
msgid "**Phase 2: Consistency checks**"
msgstr "**阶段 2：一致性检查**"

#: ../../extdev/index.rst:128
msgid "Some checking is done to ensure no surprises in the built documents."
msgstr "做了一些检查，以确保建成的文件中没有意外。"

#: ../../extdev/index.rst:130
msgid "**Phase 3: Resolving**"
msgstr "**阶段 3：解决问题**"

#: ../../extdev/index.rst:132
msgid ""
"Now that the metadata and cross-reference data of all existing documents "
"is known, all temporary nodes are replaced by nodes that can be converted"
" into output using components called transforms.  For example, links are "
"created for object references that exist, and simple literal nodes are "
"created for those that don't."
msgstr ""
"现在，所有现有文件的元数据和交叉引用数据都是已知的，"
"所有的临时节点都被可以使用称为变换的组件转换为输出的节点所取代。"
"例如，为存在的对象参考创建链接，为不存在的对象创建简单的 literal 节点。"

#: ../../extdev/index.rst:138
msgid "**Phase 4: Writing**"
msgstr "**阶段 4：写作**"

#: ../../extdev/index.rst:140
msgid ""
"This phase converts the resolved doctrees to the desired output format, "
"such as HTML or LaTeX.  This happens via a so-called docutils writer that"
" visits the individual nodes of each doctree and produces some output in "
"the process."
msgstr ""
"这一阶段将解决的 doctrees 转换为所需的输出格式，如 HTML 或 LaTeX。"
"这是通过一个所谓的 docutils writer 实现的，它访问每个 doctree 的各个节点，并在这个过程中产生一些输出。"

#: ../../extdev/index.rst:146
msgid ""
"Some builders deviate from this general build plan, for example, the "
"builder that checks external links does not need anything more than the "
"parsed doctrees and therefore does not have phases 2--4."
msgstr ""
"一些构建器偏离了这个一般的构建计划，"
"例如，检查外部链接的构建器除了解析的 doctrees 之外不需要其他东西，因此没有第2--4阶段。"

#: ../../extdev/index.rst:150
msgid ""
"To see an example of application, refer to "
":doc:`../development/tutorials/todo`."
msgstr ""
"要看一个应用程序的例子，请参考 "
":doc:`../development/tutorials/todo`。"

#: ../../extdev/index.rst:155
msgid "Extension metadata"
msgstr "插件元数据"

#: ../../extdev/index.rst:159
msgid ""
"The ``setup()`` function can return a dictionary.  This is treated by "
"Sphinx as metadata of the extension.  Metadata keys currently recognized "
"are:"
msgstr ""
"``setup()`` 函数可以返回一个字典。这被 Sphinx 视为插件的元数据。目前识别的元数据键有："

#: ../../extdev/index.rst:162
msgid ""
"``'version'``: a string that identifies the extension version.  It is "
"used for extension version requirement checking (see "
":confval:`needs_extensions`) and informational purposes.  If not given, "
"``\"unknown version\"`` is substituted."
msgstr ""
"``'version'`` ：一个标识插件版本的字符串。它是用于检查插件的版本要求（见 "
":confval:`needs_extensions`）和信息用途。如果不给，则替换为 "
"``\"unknown version\"``。"

#: ../../extdev/index.rst:165
msgid ""
"``'env_version'``: an integer that identifies the version of env data "
"structure if the extension stores any data to environment.  It is used to"
" detect the data structure has been changed from last build.  The "
"extensions have to increment the version when data structure has changed."
"  If not given, Sphinx considers the extension does not stores any data "
"to environment."
msgstr ""
"``'env_version'``：一个整数，如果插件将任何数据存储到环境中，则标识 env 数据结构的版本。"
"它被用来检测数据结构是否在上次构建时发生了变化。当数据结构发生变化时，插件必须增加该版本。"
" 如果没有给出，Sphinx 认为该插件没有存储任何数据到环境中。"

#: ../../extdev/index.rst:170
msgid ""
"``'parallel_read_safe'``: a boolean that specifies if parallel reading of"
" source files can be used when the extension is loaded.  It defaults to "
"``False``, i.e. you have to explicitly specify your extension to be "
"parallel-read-safe after checking that it is."
msgstr ""
"``'parallel_read_safe'``：一个布尔值，用于指定在加载扩展时是否可以使用源文件的并行读取。"
"它的默认值是 ``False``，也就是说，你必须在检查后明确指定你的扩展是并行阅读安全的。"

#: ../../extdev/index.rst:175
msgid "The *parallel-read-safe* extension must satisfy the following conditions:"
msgstr "*parallel-read-safe* 插件必须满足以下条件："

#: ../../extdev/index.rst:178
msgid ""
"The core logic of the extension is parallelly executable during the "
"reading phase."
msgstr ""
"插件的核心逻辑在阅读阶段是可以并行执行的。"

#: ../../extdev/index.rst:180
msgid ""
"It has event handlers for :event:`env-merge-info` and :event:`env-purge-"
"doc` events if it stores dataa to the build environment object (env) "
"during the reading phase."
msgstr ""
"如果在读取阶段将 dataa 存储到构建环境对象（env）中，"
"它有 :event:`env-merge-info` 和 :event:`env-purge-doc` 事件的处理程序。"

#: ../../extdev/index.rst:184
msgid ""
"``'parallel_write_safe'``: a boolean that specifies if parallel writing "
"of output files can be used when the extension is loaded.  Since "
"extensions usually don't negatively influence the process, this defaults "
"to ``True``."
msgstr ""
"``'parallel_write_safe'``：一个布尔值，指定在加载扩展时是否可以使用输出文件的并行写入。"
"由于扩展通常不会对进程产生负面影响，因此默认为 ``True``。"

#: ../../extdev/index.rst:188
msgid "The *parallel-write-safe* extension must satisfy the following conditions:"
msgstr "*parallel-write-safe* 插件必须满足以下条件："

#: ../../extdev/index.rst:191
msgid ""
"The core logic of the extension is parallelly executable during the "
"writing phase."
msgstr ""
"插件的核心逻辑在编写阶段是可以并行执行的。"

#: ../../extdev/index.rst:196
msgid "APIs used for writing extensions"
msgstr "用来编写插件程序的 API"

#: ../../extdev/index.rst:198
msgid ""
"These sections provide a more complete description of the tools at your "
"disposal when developing Sphinx extensions. Some are core to Sphinx (such"
" as the :doc:`appapi`) while others trigger specific behavior (such as "
"the :doc:`i18n`)"
msgstr ""
"这些部分提供了一个更完整的描述，在开发 Sphinx 插件时你可以使用的工具。"
"有些是 Sphinx 的核心（比如 :doc:`appapi`），而其他的则是触发特定的行为（比如 :doc:`i18n`）"
