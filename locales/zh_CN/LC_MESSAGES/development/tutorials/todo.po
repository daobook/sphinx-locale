# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2021, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 4.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-20 19:07+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../development/tutorials/todo.rst:2
msgid "Developing a \"TODO\" extension"
msgstr "开发一个 “TODO” 插件"

#: ../../development/tutorials/todo.rst:4
msgid ""
"The objective of this tutorial is to create a more comprehensive "
"extension than that created in :doc:`helloworld`. Whereas that guide just"
" covered writing a custom :term:`directive`, this guide adds multiple "
"directives, along with custom nodes, additional config values and custom "
"event handlers. To this end, we will cover a ``todo`` extension that adds"
" capabilities to include todo entries in the documentation, and to "
"collect these in a central place. This is similar the ``sphinxext.todo`` "
"extension distributed with Sphinx."
msgstr ""
"本教程的目的是创建一个比 :doc:`helloworld` 中创建的更全面的插件。"
"那个指南只是涵盖了编写一个自定义的 :term:`指令`，而本指南增加了多个指令，"
"以及自定义节点、额外的配置值和自定义事件处理程序。"
"为此，我们将介绍 ``todo`` 插件，它可以在文档中加入 todo 项，"
"并将其收集在一个中心位置。这与 Sphinx 的 ``sphinxext.todo`` 插件类似。"

#: ../../development/tutorials/todo.rst:14
msgid "Overview"
msgstr "概述"

#: ../../development/tutorials/todo.rst:17
msgid ""
"To understand the design of this extension, refer to :ref:`important-"
"objects` and :ref:`build-phases`."
msgstr ""
"要了解这个插件的设计，请参考 :ref:`important-objects` 和 :ref:`build-phases`。"

#: ../../development/tutorials/todo.rst:20
msgid "We want the extension to add the following to Sphinx:"
msgstr "我们希望这个插件能给 Sphinx 增加以下内容:"

#: ../../development/tutorials/todo.rst:22
msgid ""
"A ``todo`` directive, containing some content that is marked with "
"\"TODO\" and only shown in the output if a new config value is set. Todo "
"entries should not be in the output by default."
msgstr ""
"一个 ``todo`` 指令，包含一些标有 “TODO” 的内容，"
"只有在设置了新的配置值后才会在输出中显示。"
"默认情况下，Todo 条目不应该出现在输出中。"

#: ../../development/tutorials/todo.rst:26
msgid ""
"A ``todolist`` directive that creates a list of all todo entries "
"throughout the documentation."
msgstr ""
"一个 ``todolist`` 指令，创建了整个文档中所有 todo 条目的列表。"

#: ../../development/tutorials/todo.rst:29
msgid "For that, we will need to add the following elements to Sphinx:"
msgstr "为此，我们需要向 Sphinx 添加以下元素："

#: ../../development/tutorials/todo.rst:31
msgid "New directives, called ``todo`` and ``todolist``."
msgstr "新指令，称为 ``todo`` 和 ``todolist``。"

#: ../../development/tutorials/todo.rst:33
msgid ""
"New document tree nodes to represent these directives, conventionally "
"also called ``todo`` and ``todolist``.  We wouldn't need new nodes if the"
" new directives only produced some content representable by existing "
"nodes."
msgstr ""
"新建文档树节点来代表这些指令，传统上也称为 ``todo`` 和 ``todolist``。"
"如果新指令只产生一些可由现有节点表示的内容，我们就不需要新的节点。"

#: ../../development/tutorials/todo.rst:37
msgid ""
"A new config value ``todo_include_todos`` (config value names should "
"start with the extension name, in order to stay unique) that controls "
"whether todo entries make it into the output."
msgstr ""
"一个新的配置值 ``todo_include_todos`` "
"（配置值的名字应该以扩展名开始，以便保持唯一），控制 todo 条目是否进入输出。"

#: ../../development/tutorials/todo.rst:41
msgid ""
"New event handlers: one for the :event:`doctree-resolved` event, to "
"replace the todo and todolist nodes, one for :event:`env-merge-info` to "
"merge intermediate results from parallel builds, and one for :event:`env-"
"purge-doc` (the reason for that will be covered later)."
msgstr ""
"新的事件处理程序：一个用于 "
":event:`doctree-resolved` 事件，以替换 todo 和 todolist 节点，"
"一个用于 :event:`env-merge-info`，以合并并行构建的中间结果，"
"一个用于 :event:`env-purge-doc` （其原因将在后面介绍）。"

#: ../../development/tutorials/todo.rst:48
msgid "Prerequisites"
msgstr "前提条件"

#: ../../development/tutorials/todo.rst:50
msgid ""
"As with :doc:`helloworld`, we will not be distributing this plugin via "
"PyPI so once again we need a Sphinx project to call this from. You can "
"use an existing project or create a new one using :program:`sphinx-"
"quickstart`."
msgstr ""
"和 :doc:`helloworld` 一样，我们不会通过 PyPI 发布这个插件，"
"所以我们再次需要一个 Sphinx 项目来调用它。"
"你可以使用现有的项目或使用 :program:`sphinx-quickstart` 创建一个新项目。"

#: ../../development/tutorials/todo.rst:54
msgid ""
"We assume you are using separate source (:file:`source`) and build "
"(:file:`build`) folders. Your extension file could be in any folder of "
"your project. In our case, let's do the following:"
msgstr ""
"我们假设你在使用独立的源文件（:file:`source`）和构建文件（:file:`build`）文件夹。"
"你的扩展文件可以在你项目的任何文件夹中。在我们的例子中，让我们做以下事情："

#: ../../development/tutorials/todo.rst:58
msgid "Create an :file:`_ext` folder in :file:`source`"
msgstr "在 :file:`source` 中创建一个 :file:`_ext` 文件夹"

#: ../../development/tutorials/todo.rst:59
msgid "Create a new Python file in the :file:`_ext` folder called :file:`todo.py`"
msgstr "在 :file:`_ext` 文件夹下创建一个新的 Python 文件，名为 :file:`todo.py`。"

#: ../../development/tutorials/todo.rst:61
msgid "Here is an example of the folder structure you might obtain:"
msgstr "下面是一个你可能获得的文件夹结构的例子："

#: ../../development/tutorials/todo.rst:77
msgid "Writing the extension"
msgstr "编写插件"

#: ../../development/tutorials/todo.rst:79
msgid ""
"Open :file:`todo.py` and paste the following code in it, all of which we "
"will explain in detail shortly:"
msgstr ""
"打开 :file:`todo.py`，并在其中粘贴以下代码，所有这些我们很快会详细解释："

#: ../../development/tutorials/todo.rst:86
msgid ""
"This is far more extensive extension than the one detailed in "
":doc:`helloworld`, however, we will will look at each piece step-by-step "
"to explain what's happening."
msgstr ""
"这比 :doc:`helloworld` 中详细介绍的扩展要广泛得多，"
"然而，我们将逐步查看每一块，解释发生了什么。"

#: ../../development/tutorials/todo.rst:91
msgid "The node classes"
msgstr "节点类"

#: ../../development/tutorials/todo.rst:92
msgid "Let's start with the node classes:"
msgstr "让我们从节点类开始："

#: ../../development/tutorials/todo.rst:99
msgid ""
"Node classes usually don't have to do anything except inherit from the "
"standard docutils classes defined in :mod:`docutils.nodes`.  ``todo`` "
"inherits from ``Admonition`` because it should be handled like a note or "
"warning, ``todolist`` is just a \"general\" node."
msgstr ""
"节点类通常不需要做任何事情，除了继承 :mod:`docutils.nodes` 中定义的标准 docutils 类。"
"``todo`` 继承自 ``Admonition``，因为它应该像注释或警告一样被处理，"
"``todolist`` 只是一个 “通用” 节点。"

#: ../../development/tutorials/todo.rst:106
msgid ""
"Many extensions will not have to create their own node classes and work "
"fine with the nodes already provided by `docutils "
"<https://docutils.sourceforge.io/docs/ref/doctree.html>`__ and "
":ref:`Sphinx <nodes>`."
msgstr ""
"许多扩展将不必创建他们自己的节点类，"
"并与已经由 `docutils <https://docutils.sourceforge.io/docs/ref/doctree.html>`__ "
"和 :ref:`Sphinx <nodes>` 提供的节点顺利工作。"

#: ../../development/tutorials/todo.rst:113
msgid ""
"It is important to know that while you can extend Sphinx without leaving "
"your ``conf.py``, if you declare an inherited node right there, you'll "
"hit an unobvious :py:class:`PickleError`. So if something goes wrong, "
"please make sure that you put inherited nodes into a separate Python "
"module."
msgstr ""
"需要知道的是，虽然你可以在不离开 ``conf.py`` 的情况下扩展 Sphinx，"
"但如果你在那里声明一个继承的节点，你会遇到一个不明显的 :py:class:`PickleError`。"
"所以如果出了问题，请确保你把继承的节点放到一个单独的 Python 模块中。"

#: ../../development/tutorials/todo.rst:119
msgid "For more details, see:"
msgstr "更多细节见："

#: ../../development/tutorials/todo.rst:121
msgid "https://github.com/sphinx-doc/sphinx/issues/6751"
msgstr ""

#: ../../development/tutorials/todo.rst:122
msgid "https://github.com/sphinx-doc/sphinx/issues/1493"
msgstr ""

#: ../../development/tutorials/todo.rst:123
msgid "https://github.com/sphinx-doc/sphinx/issues/1424"
msgstr ""

#: ../../development/tutorials/todo.rst:126
msgid "The directive classes"
msgstr "指令类"

#: ../../development/tutorials/todo.rst:127
msgid ""
"A directive class is a class deriving usually from "
":class:`docutils.parsers.rst.Directive`. The directive interface is also "
"covered in detail in the `docutils documentation`_; the important thing "
"is that the class should have attributes that configure the allowed "
"markup, and a ``run`` method that returns a list of nodes."
msgstr ""
"指令类是一个通常从 :class:`docutils.parsers.rst.Directive` 派生出来的类。"
"指令接口在 `docutils 文档`_ 中也有详细介绍；"
"重要的是，该类应该有配置允许标记的属性，以及一个返回节点列表的 ``run`` 方法。"

#: ../../development/tutorials/todo.rst:133
msgid "Looking first at the ``TodolistDirective`` directive:"
msgstr "首先看一下 ``TodolistDirective`` 指令。"

#: ../../development/tutorials/todo.rst:140
msgid ""
"It's very simple, creating and returning an instance of our ``todolist`` "
"node class.  The ``TodolistDirective`` directive itself has neither "
"content nor arguments that need to be handled. That brings us to the "
"``TodoDirective`` directive:"
msgstr ""
"这很简单，创建并返回我们的 ``todolist`` 节点类的实例。"
"``TodolistDirective`` 指令本身既没有内容也没有需要处理的参数。"
"这给我们带来了 ``TodoDirective`` 指令："

#: ../../development/tutorials/todo.rst:150
msgid ""
"Several important things are covered here. First, as you can see, we're "
"now subclassing the :class:`~sphinx.util.docutils.SphinxDirective` helper"
" class instead of the usual :class:`~docutils.parsers.rst.Directive` "
"class. This gives us access to the :ref:`build environment instance "
"<important-objects>` using the ``self.env`` property. Without this, we'd "
"have to use the rather convoluted ``self.state.document.settings.env``. "
"Then, to act as a link target (from ``TodolistDirective``), the "
"``TodoDirective`` directive needs to return a target node in addition to "
"the ``todo`` node.  The target ID (in HTML, this will be the anchor name)"
" is generated by using ``env.new_serialno`` which returns a new unique "
"integer on each call and therefore leads to unique target names. The "
"target node is instantiated without any text (the first two arguments)."
msgstr ""
"这里涵盖了几件重要的事情。"
"首先，正如你所看到的，我们现在把 :class:`~sphinx.util.docutils.SphinxDirective` 辅助类，"
"而不是通常的 :class:`~docutils.parsers.rst.Directive` 类进行子类化。"
"这让我们可以使用 ``self.env`` 属性访问 :ref:`build environment 实例 <important-objects>`。"
"如果没有这个，我们将不得不使用相当复杂的 ``self.state.document.settings.env``。"
"然后，为了充当链接目标（来自 ``TodolistDirective`` ），"
"``TodoDirective`` 指令需要在 ``todo`` 节点之外返回一个目标节点。"
"目标 ID（在 HTML 中，这将是锚的名称）是通过使用 ``env.new_serialno`` 来生成的，"
"它在每次调用时都会返回一个新的唯一的整数，因此导致了唯一的目标名称。"
"目标节点被实例化，没有任何文本（前两个参数）"。

#: ../../development/tutorials/todo.rst:162
msgid ""
"On creating admonition node, the content body of the directive are parsed"
" using ``self.state.nested_parse``.  The first argument gives the content"
" body, and the second one gives content offset.  The third argument gives"
" the parent node of parsed result, in our case the ``todo`` node. "
"Following this, the ``todo`` node is added to the environment.  This is "
"needed to be able to create a list of all todo entries throughout the "
"documentation, in the place where the author puts a ``todolist`` "
"directive.  For this case, the environment attribute ``todo_all_todos`` "
"is used (again, the name should be unique, so it is prefixed by the "
"extension name).  It does not exist when a new environment is created, so"
" the directive must check and create it if necessary.  Various "
"information about the todo entry's location are stored along with a copy "
"of the node."
msgstr ""
"在创建告诫节点时，指令的内容体使用 ``self.state.nested_parse`` 进行解析。"
"第一个参数给出内容主体，第二个参数给出内容偏移。"
"第三个参数给出解析结果的父节点，在我们的例子中是 ``todo`` 节点。"
"之后，“todo” 节点被添加到环境中。"
"这是需要的，以便能够在作者放置 ``todolist`` 指令的地方，创建整个文档中所有 todo 条目的列表。"
"在这种情况下，环境属性 ``todo_all_todos`` 被使用（同样，这个名字应该是唯一的，所以它以扩展名为前缀）。 "
"当一个新环境被创建时，它并不存在，所以指令必须检查并在必要时创建它。"
"关于 todo 条目的位置的各种信息与节点的副本一起被存储。"

#: ../../development/tutorials/todo.rst:174
msgid ""
"In the last line, the nodes that should be put into the doctree are "
"returned: the target node and the admonition node."
msgstr ""
"在最后一行，应该被放入 doctree 中的节点被返回：目标节点和训诫节点。"

#: ../../development/tutorials/todo.rst:177
msgid "The node structure that the directive returns looks like this::"
msgstr "该指令返回的节点结构看起来像这样 ::"

#: ../../development/tutorials/todo.rst:194
msgid "The event handlers"
msgstr "事件处理者"

#: ../../development/tutorials/todo.rst:195
msgid ""
"Event handlers are one of Sphinx's most powerful features, providing a "
"way to do hook into any part of the documentation process. There are many"
" events provided by Sphinx itself, as detailed in :ref:`the API guide "
"<events>`, and we're going to use a subset of them here."
msgstr ""

#: ../../development/tutorials/todo.rst:200
msgid ""
"Let's look at the event handlers used in the above example.  First, the "
"one for the :event:`env-purge-doc` event:"
msgstr ""

#: ../../development/tutorials/todo.rst:208
msgid ""
"Since we store information from source files in the environment, which is"
" persistent, it may become out of date when the source file changes.  "
"Therefore, before each source file is read, the environment's records of "
"it are cleared, and the :event:`env-purge-doc` event gives extensions a "
"chance to do the same. Here we clear out all todos whose docname matches "
"the given one from the ``todo_all_todos`` list.  If there are todos left "
"in the document, they will be added again during parsing."
msgstr ""

#: ../../development/tutorials/todo.rst:216
msgid ""
"The next handler, for the :event:`env-merge-info` event, is used during "
"parallel builds. As during parallel builds all threads have their own "
"``env``, there's multiple ``todo_all_todos`` lists that need to be "
"merged:"
msgstr ""

#: ../../development/tutorials/todo.rst:227
msgid "The other handler belongs to the :event:`doctree-resolved` event:"
msgstr ""

#: ../../development/tutorials/todo.rst:234
msgid ""
"The :event:`doctree-resolved` event is emitted at the end of :ref:`phase "
"3 (resolving) <build-phases>` and allows custom resolving to be done. The"
" handler we have written for this event is a bit more involved. If the "
"``todo_include_todos`` config value (which we'll describe shortly) is "
"false, all ``todo`` and ``todolist`` nodes are removed from the "
"documents. If not, ``todo`` nodes just stay where and how they are.  "
"``todolist`` nodes are replaced by a list of todo entries, complete with "
"backlinks to the location where they come from.  The list items are "
"composed of the nodes from the ``todo`` entry and docutils nodes created "
"on the fly: a paragraph for each entry, containing text that gives the "
"location, and a link (reference node containing an italic node) with the "
"backreference. The reference URI is built by "
":meth:`sphinx.builders.Builder.get_relative_uri` which creates a suitable"
" URI depending on the used builder, and appending the todo node's (the "
"target's) ID as the anchor name."
msgstr ""

#: ../../development/tutorials/todo.rst:250
msgid "The ``setup`` function"
msgstr ""

#: ../../development/tutorials/todo.rst:253
msgid ""
"As noted :doc:`previously <helloworld>`, the ``setup`` function is a "
"requirement and is used to plug directives into Sphinx. However, we also "
"use it to hook up the other parts of our extension. Let's look at our "
"``setup`` function:"
msgstr ""

#: ../../development/tutorials/todo.rst:262
msgid ""
"The calls in this function refer to the classes and functions we added "
"earlier. What the individual calls do is the following:"
msgstr ""

#: ../../development/tutorials/todo.rst:265
msgid ""
":meth:`~Sphinx.add_config_value` lets Sphinx know that it should "
"recognize the new *config value* ``todo_include_todos``, whose default "
"value should be ``False`` (this also tells Sphinx that it is a boolean "
"value)."
msgstr ""

#: ../../development/tutorials/todo.rst:269
msgid ""
"If the third argument was ``'html'``, HTML documents would be full "
"rebuild if the config value changed its value.  This is needed for config"
" values that influence reading (build :ref:`phase 1 (reading) <build-"
"phases>`)."
msgstr ""

#: ../../development/tutorials/todo.rst:273
msgid ""
":meth:`~Sphinx.add_node` adds a new *node class* to the build system.  It"
" also can specify visitor functions for each supported output format.  "
"These visitor functions are needed when the new nodes stay until "
":ref:`phase 4 (writing) <build-phases>`. Since the ``todolist`` node is "
"always replaced in :ref:`phase 3 (resolving) <build-phases>`, it doesn't "
"need any."
msgstr ""

#: ../../development/tutorials/todo.rst:279
msgid ""
":meth:`~Sphinx.add_directive` adds a new *directive*, given by name and "
"class."
msgstr ""

#: ../../development/tutorials/todo.rst:281
msgid ""
"Finally, :meth:`~Sphinx.connect` adds an *event handler* to the event "
"whose name is given by the first argument.  The event handler function is"
" called with several arguments which are documented with the event."
msgstr ""

#: ../../development/tutorials/todo.rst:285
msgid "With this, our extension is complete."
msgstr ""

#: ../../development/tutorials/todo.rst:289
msgid "Using the extension"
msgstr ""

#: ../../development/tutorials/todo.rst:291
msgid ""
"As before, we need to enable the extension by declaring it in our "
":file:`conf.py` file. There are two steps necessary here:"
msgstr ""

#: ../../development/tutorials/todo.rst:294
msgid ""
"Add the :file:`_ext` directory to the `Python path`_ using "
"``sys.path.append``. This should be placed at the top of the file."
msgstr ""

#: ../../development/tutorials/todo.rst:297
msgid ""
"Update or create the :confval:`extensions` list and add the extension "
"file name to the list"
msgstr ""

#: ../../development/tutorials/todo.rst:300
msgid ""
"In addition, we may wish to set the ``todo_include_todos`` config value. "
"As noted above, this defaults to ``False`` but we can set it explicitly."
msgstr ""

#: ../../development/tutorials/todo.rst:303
msgid "For example:"
msgstr ""

#: ../../development/tutorials/todo.rst:316
msgid "You can now use the extension throughout your project. For example:"
msgstr ""

#: ../../development/tutorials/todo.rst:318
msgid "index.rst"
msgstr ""

#: ../../development/tutorials/todo.rst:332
msgid "somefile.rst"
msgstr ""

#: ../../development/tutorials/todo.rst:342
msgid "someotherfile.rst"
msgstr ""

#: ../../development/tutorials/todo.rst:352
msgid ""
"Because we have configured ``todo_include_todos`` to ``False``, we won't "
"actually see anything rendered for the ``todo`` and ``todolist`` "
"directives. However, if we toggle this to true, we will see the output "
"described previously."
msgstr ""

#: ../../development/tutorials/todo.rst:359
msgid "Further reading"
msgstr ""

#: ../../development/tutorials/todo.rst:361
msgid ""
"For more information, refer to the `docutils`_ documentation and "
":doc:`/extdev/index`."
msgstr ""

